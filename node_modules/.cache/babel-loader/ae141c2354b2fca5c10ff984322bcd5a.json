{"ast":null,"code":"/**\n * The full state of the application is stored and managed here.\n */\nimport { createStore } from 'redux';\nvar INITIAL_STATE = {\n  packs: [],\n  setRefreshingPacks: false\n};\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  try {\n    switch (action.type) {\n      case \"set-packs\":\n        return update(setPacks, state, action);\n\n      case \"set-pack-background\":\n        return update(setPackImage, state, action);\n\n      case \"set-refreshing-packs\":\n        return update(setRefreshingPacks, state, action);\n    }\n\n    return state;\n  } catch (ex) {\n    console.error(ex);\n  }\n}\n/**\n * Helper to make sure the returned state is not a mutation of the initial one.\n */\n\n\nfunction update(slot, state, action) {\n  return Object.assign({}, state, slot(state, action));\n}\n\nfunction setPacks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return {\n    packs: action.packs,\n    refreshingPacks: false\n  };\n}\n\nfunction setPackImage() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return {\n    packs: state.packs.map(function (pack) {\n      if (pack.id !== action.packId) return Object.assign({}, pack);\n      return Object.assign({}, pack, {\n        background: action.url\n      });\n    })\n  };\n}\n\nfunction setRefreshingPacks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return {\n    refreshingPacks: action.value\n  };\n}\n\nvar store = createStore(reducer);\nexport default {\n  store: store,\n  dispatch: store.dispatch,\n  setPacks: function setPacks(packs) {\n    return {\n      type: \"set-packs\",\n      packs: packs\n    };\n  },\n  setPackImage: function setPackImage(packId, url) {\n    return {\n      type: \"set-pack-background\",\n      packId: packId,\n      url: url\n    };\n  },\n  setRefreshingPacks: function setRefreshingPacks() {\n    return {\n      type: \"set-refreshing-packs\",\n      value: true\n    };\n  }\n};","map":{"version":3,"sources":["/home/tolokoban/Code/github/boulder-dash/src/state/index.ts"],"names":["createStore","INITIAL_STATE","packs","setRefreshingPacks","reducer","state","action","type","update","setPacks","setPackImage","ex","console","error","slot","Object","assign","refreshingPacks","map","pack","id","packId","background","url","value","store","dispatch"],"mappings":"AAAA;;;AAGA,SAASA,WAAT,QAA4B,OAA5B;AAIA,IAAMC,aAAwB,GAAG;AAC7BC,EAAAA,KAAK,EAAE,EADsB;AAE7BC,EAAAA,kBAAkB,EAAE;AAFS,CAAjC;;AAKA,SAASC,OAAT,GAA2F;AAAA,MAA1EC,KAA0E,uEAA3CJ,aAA2C;AAAA,MAA5BK,MAA4B;;AACvF,MAAI;AACA,YAAQA,MAAM,CAACC,IAAf;AACI,WAAK,WAAL;AAAkB,eAAOC,MAAM,CAACC,QAAD,EAAWJ,KAAX,EAAkBC,MAAlB,CAAb;;AAClB,WAAK,qBAAL;AAA4B,eAAOE,MAAM,CAACE,YAAD,EAAeL,KAAf,EAAsBC,MAAtB,CAAb;;AAC5B,WAAK,sBAAL;AAA6B,eAAOE,MAAM,CAACL,kBAAD,EAAqBE,KAArB,EAA4BC,MAA5B,CAAb;AAHjC;;AAKA,WAAOD,KAAP;AACH,GAPD,CAQA,OAAOM,EAAP,EAAW;AACPC,IAAAA,OAAO,CAACC,KAAR,CAAcF,EAAd;AACH;AACJ;AAED;;;;;AAGA,SAASH,MAAT,CAAgBM,IAAhB,EACIT,KADJ,EAEIC,MAFJ,EAEqB;AACjB,SAAOS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,KAAlB,EAAyBS,IAAI,CAACT,KAAD,EAAQC,MAAR,CAA7B,CAAP;AACH;;AAED,SAASG,QAAT,GAAqF;AAAA,MAAnEJ,KAAmE,uEAApCJ,aAAoC;AAAA,MAArBK,MAAqB;AACjF,SAAO;AAAEJ,IAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBe,IAAAA,eAAe,EAAE;AAAxC,GAAP;AACH;;AAED,SAASP,YAAT,GAAyF;AAAA,MAAnEL,KAAmE,uEAApCJ,aAAoC;AAAA,MAArBK,MAAqB;AACrF,SAAO;AACHJ,IAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYgB,GAAZ,CAAgB,UAAAC,IAAI,EAAI;AAC3B,UAAIA,IAAI,CAACC,EAAL,KAAYd,MAAM,CAACe,MAAvB,EAA+B,OAAON,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBG,IAAlB,CAAP;AAC/B,aAAOJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBG,IAAlB,EAAwB;AAAEG,QAAAA,UAAU,EAAEhB,MAAM,CAACiB;AAArB,OAAxB,CAAP;AACH,KAHM;AADJ,GAAP;AAMH;;AAED,SAASpB,kBAAT,GAA+F;AAAA,MAAnEE,KAAmE,uEAApCJ,aAAoC;AAAA,MAArBK,MAAqB;AAC3F,SAAO;AAAEW,IAAAA,eAAe,EAAEX,MAAM,CAACkB;AAA1B,GAAP;AACH;;AAED,IAAMC,KAAK,GAAGzB,WAAW,CAACI,OAAD,CAAzB;AACA,eAAe;AACXqB,EAAAA,KAAK,EAALA,KADW;AACJC,EAAAA,QAAQ,EAAED,KAAK,CAACC,QADZ;AAEXjB,EAAAA,QAFW,oBAEFP,KAFE,EAEc;AAAE,WAAO;AAAEK,MAAAA,IAAI,EAAE,WAAR;AAAqBL,MAAAA,KAAK,EAALA;AAArB,KAAP;AAAsC,GAFtD;AAGXQ,EAAAA,YAHW,wBAGEW,MAHF,EAGkBE,GAHlB,EAG+B;AAAE,WAAO;AAAEhB,MAAAA,IAAI,EAAE,qBAAR;AAA+Bc,MAAAA,MAAM,EAANA,MAA/B;AAAuCE,MAAAA,GAAG,EAAHA;AAAvC,KAAP;AAAsD,GAHvF;AAIXpB,EAAAA,kBAJW,gCAIU;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAE,sBAAR;AAAgCiB,MAAAA,KAAK,EAAE;AAAvC,KAAP;AAAuD;AAJnE,CAAf","sourcesContent":["/**\n * The full state of the application is stored and managed here.\n */\nimport { createStore } from 'redux'\nimport { IAppState, IAction, IPack } from \"../types\"\nimport castBoolean from \"../tfw/converter/boolean\"\n\nconst INITIAL_STATE: IAppState = {\n    packs: [],\n    setRefreshingPacks: false\n};\n\nfunction reducer(state: IAppState | undefined = INITIAL_STATE, action: IAction): IAppState {\n    try {\n        switch (action.type) {\n            case \"set-packs\": return update(setPacks, state, action);\n            case \"set-pack-background\": return update(setPackImage, state, action);\n            case \"set-refreshing-packs\": return update(setRefreshingPacks, state, action);\n        }\n        return state;\n    }\n    catch (ex) {\n        console.error(ex);\n    }\n}\n\n/**\n * Helper to make sure the returned state is not a mutation of the initial one.\n */\nfunction update(slot: (state: IAppState | undefined, action: IAction) => {},\n    state: IAppState | undefined,\n    action: IAction) {\n    return Object.assign({}, state, slot(state, action));\n}\n\nfunction setPacks(state: IAppState | undefined = INITIAL_STATE, action: IAction): {} {\n    return { packs: action.packs, refreshingPacks: false };\n}\n\nfunction setPackImage(state: IAppState | undefined = INITIAL_STATE, action: IAction): {} {\n    return {\n        packs: state.packs.map(pack => {\n            if (pack.id !== action.packId) return Object.assign({}, pack);\n            return Object.assign({}, pack, { background: action.url });\n        })\n    };\n}\n\nfunction setRefreshingPacks(state: IAppState | undefined = INITIAL_STATE, action: IAction): {} {\n    return { refreshingPacks: action.value };\n}\n\nconst store = createStore(reducer);\nexport default {\n    store, dispatch: store.dispatch,\n    setPacks(packs: IPack[]) { return { type: \"set-packs\", packs }; },\n    setPackImage(packId: string, url: string) { return { type: \"set-pack-background\", packId, url }; },\n    setRefreshingPacks() { return { type: \"set-refreshing-packs\", value: true }; }\n};\n"]},"metadata":{},"sourceType":"module"}