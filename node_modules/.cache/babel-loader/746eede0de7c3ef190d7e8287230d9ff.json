{"ast":null,"code":"export default function castInteger(v) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var defVal = Math.floor(.5 + defaultValue);\n\n  switch (typeof v) {\n    case \"boolean\":\n      return v ? 1 : 0;\n\n    case \"number\":\n      return Math.floor(.5 + v);\n\n    case \"string\":\n      var text = v.trim().toLowerCase();\n\n      if (text.startsWith(\"0x\")) {\n        var hexa = parseInt(text.substr(2), 16);\n        return isNaN(hexa) ? defVal : hexa;\n      }\n\n      if (text.startsWith(\"0b\")) {\n        var _hexa = parseInt(text.substr(2), 2);\n\n        return isNaN(_hexa) ? defVal : _hexa;\n      }\n\n      if (text.startsWith(\"0o\")) {\n        var _hexa2 = parseInt(text.substr(2), 8);\n\n        return isNaN(_hexa2) ? defVal : _hexa2;\n      }\n\n      var num = parseFloat(text);\n      if (isNaN(num)) return defVal;\n      return Math.floor(.5 + num);\n\n    default:\n      return defVal;\n  }\n}","map":{"version":3,"sources":["/home/tolokoban/Code/github/boulder-dash/src/tfw/converter/integer.ts"],"names":["castInteger","v","defaultValue","defVal","Math","floor","text","trim","toLowerCase","startsWith","hexa","parseInt","substr","isNaN","num","parseFloat"],"mappings":"AAAA,eAAe,SAASA,WAAT,CAAqBC,CAArB,EAAuD;AAAA,MAA1BC,YAA0B,uEAAX,CAAW;AAClE,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKH,YAAhB,CAAf;;AAEA,UAAQ,OAAOD,CAAf;AACI,SAAK,SAAL;AACI,aAAOA,CAAC,GAAG,CAAH,GAAO,CAAf;;AACJ,SAAK,QAAL;AACI,aAAOG,IAAI,CAACC,KAAL,CAAW,KAAKJ,CAAhB,CAAP;;AACJ,SAAK,QAAL;AACI,UAAMK,IAAI,GAAGL,CAAC,CAACM,IAAF,GAASC,WAAT,EAAb;;AACA,UAAIF,IAAI,CAACG,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AACvB,YAAMC,IAAI,GAAGC,QAAQ,CAACL,IAAI,CAACM,MAAL,CAAY,CAAZ,CAAD,EAAiB,EAAjB,CAArB;AACA,eAAOC,KAAK,CAACH,IAAD,CAAL,GAAcP,MAAd,GAAuBO,IAA9B;AACH;;AACD,UAAIJ,IAAI,CAACG,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AACvB,YAAMC,KAAI,GAAGC,QAAQ,CAACL,IAAI,CAACM,MAAL,CAAY,CAAZ,CAAD,EAAiB,CAAjB,CAArB;;AACA,eAAOC,KAAK,CAACH,KAAD,CAAL,GAAcP,MAAd,GAAuBO,KAA9B;AACH;;AACD,UAAIJ,IAAI,CAACG,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AACvB,YAAMC,MAAI,GAAGC,QAAQ,CAACL,IAAI,CAACM,MAAL,CAAY,CAAZ,CAAD,EAAiB,CAAjB,CAArB;;AACA,eAAOC,KAAK,CAACH,MAAD,CAAL,GAAcP,MAAd,GAAuBO,MAA9B;AACH;;AACD,UAAMI,GAAG,GAAGC,UAAU,CAACT,IAAD,CAAtB;AACA,UAAIO,KAAK,CAACC,GAAD,CAAT,EAAgB,OAAOX,MAAP;AAChB,aAAOC,IAAI,CAACC,KAAL,CAAW,KAAKS,GAAhB,CAAP;;AACJ;AACI,aAAOX,MAAP;AAvBR;AAyBH","sourcesContent":["export default function castInteger(v: any, defaultValue = 0): number {\n    const defVal = Math.floor(.5 + defaultValue);\n\n    switch (typeof v) {\n        case \"boolean\":\n            return v ? 1 : 0;\n        case \"number\":\n            return Math.floor(.5 + v);\n        case \"string\":\n            const text = v.trim().toLowerCase();\n            if (text.startsWith(\"0x\")) {\n                const hexa = parseInt(text.substr(2), 16);\n                return isNaN(hexa) ? defVal : hexa;\n            }\n            if (text.startsWith(\"0b\")) {\n                const hexa = parseInt(text.substr(2), 2);\n                return isNaN(hexa) ? defVal : hexa;\n            }\n            if (text.startsWith(\"0o\")) {\n                const hexa = parseInt(text.substr(2), 8);\n                return isNaN(hexa) ? defVal : hexa;\n            }\n            const num = parseFloat(text);\n            if (isNaN(num)) return defVal;\n            return Math.floor(.5 + num);\n        default:\n            return defVal;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}