{"ast":null,"code":"import _classCallCheck from \"/home/tolokoban/Code/github/boulder-dash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tolokoban/Code/github/boulder-dash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @class Color\n * Fast color manipulations.\n * Attributes R  (red), G  (green), B  (blue), A  (alpha), H  (hue), S\n * (saturation), and L (luminance) are all floats between 0 and 1.\n */\nvar Color =\n/*#__PURE__*/\nfunction () {\n  function Color() {\n    var codeCSS = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"#000000\";\n\n    _classCallCheck(this, Color);\n\n    this.R = void 0;\n    this.G = void 0;\n    this.B = void 0;\n    this.H = void 0;\n    this.S = void 0;\n    this.L = void 0;\n    this.A = void 0;\n    this.R = 0;\n    this.G = 0;\n    this.B = 0;\n    this.H = 0;\n    this.S = 0;\n    this.L = 0;\n    this.A = 1;\n    this.parse(codeCSS);\n  }\n\n  _createClass(Color, [{\n    key: \"parse\",\n\n    /**\n     * Parse a color writtent in CSS syntax.\n     *\n     * @param   {string} code - CSS color.\n     * @returns {boolean} `true` if the color has valid syntax.\n     */\n    value: function parse() {\n      var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"#000000\";\n      var input = code.trim().toUpperCase();\n      if (this.parseHexa.call(this, input)) return true;\n      if (this.parseRGB.call(this, input)) return true;\n      if (this.parseRGBA.call(this, input)) return true;\n      if (this.parseHSL.call(this, input)) return true; // @TODO parseHSLA.\n\n      return false;\n    }\n    /**\n     * @see https://en.wikipedia.org/wiki/Grayscale\n     * @this Color\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"luminance\",\n    value: function luminance() {\n      return 0.2126 * this.R + 0.7152 * this.G + 0.0722 * this.B;\n    }\n    /**\n     * @returns {integer} 0 if the color is dark and 1 if it is light.\n     */\n\n  }, {\n    key: \"luminanceStep\",\n    value: function luminanceStep() {\n      return this.luminance() < .6 ? 0 : 1;\n    }\n    /**\n     * @this Color\n     * @returns {string} String value of the color. `#fd45a7`.\n     */\n\n  }, {\n    key: \"stringify\",\n    value: function stringify() {\n      var color = hexa2(this.R * 255) + hexa2(this.G * 255) + hexa2(this.B * 255);\n\n      if (this.A < 1) {\n        color += hexa2(this.A * 255);\n      }\n\n      return \"#\".concat(color);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var newColor = new Color();\n      newColor.R = this.R;\n      newColor.G = this.G;\n      newColor.B = this.B;\n      newColor.A = this.A;\n      newColor.H = this.H;\n      newColor.S = this.S;\n      newColor.L = this.L;\n      return newColor;\n    }\n    /**\n         * @see https://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n         * @this Color\n         * @returns {undefined}\n         */\n\n  }, {\n    key: \"hsl2rgb\",\n    value: function hsl2rgb() {\n      var H = 6 * this.H,\n          S = this.S,\n          L = this.L,\n          chroma = (1 - Math.abs(2 * L - 1)) * S,\n          x = chroma * (1 - Math.abs(H % 2 - 1));\n      var R = 0,\n          G = 0,\n          B = 0;\n\n      if (H < 3) {\n        if (H < 1) {\n          R = chroma;\n          G = x;\n          B = 0;\n        } else if (H < 2) {\n          R = x;\n          G = chroma;\n          B = 0;\n        } else {\n          // H == 2.\n          R = 0;\n          G = chroma;\n          B = x;\n        }\n      } else if (H < 4) {\n        R = 0;\n        G = x;\n        B = chroma;\n      } else if (H < 5) {\n        R = x;\n        G = 0;\n        B = chroma;\n      } else {\n        R = chroma;\n        G = 0;\n        B = x;\n      }\n\n      var shift = L - chroma * 0.5;\n      this.R = R + shift;\n      this.G = G + shift;\n      this.B = B + shift;\n    }\n  }, {\n    key: \"rgb2hsl\",\n    value: function rgb2hsl() {\n      var R = this.R;\n      var G = this.G;\n      var B = this.B;\n      var min = Math.min(R, G, B);\n      var max = Math.max(R, G, B);\n      var delta = max - min;\n      this.L = 0.5 * (max + min);\n\n      if (delta < 0.000001) {\n        this.H = 0;\n        this.S = 0;\n      } else {\n        this.S = delta / (1 - Math.abs(2 * this.L - 1));\n\n        if (max === R) {\n          if (G >= B) {\n            this.H = INV6 * ((G - B) / delta);\n          } else {\n            this.H = 1 - INV6 * ((B - G) / delta);\n          }\n        } else if (max === G) {\n          this.H = INV6 * (2 + (B - R) / delta);\n        } else {\n          this.H = INV6 * (4 + (R - G) / delta);\n        }\n      }\n    }\n  }, {\n    key: \"parseHexa\",\n    value: function parseHexa(text) {\n      if (text.charAt(0) !== '#') return false;\n      var R = 0,\n          G = 0,\n          B = 0,\n          A = 1;\n\n      switch (text.length) {\n        case 4:\n          R = parseInt(text.charAt(1), 16) * INV15;\n          G = parseInt(text.charAt(2), 16) * INV15;\n          B = parseInt(text.charAt(3), 16) * INV15;\n          break;\n\n        case 5:\n          R = parseInt(text.charAt(1), 16) * INV15;\n          G = parseInt(text.charAt(2), 16) * INV15;\n          B = parseInt(text.charAt(3), 16) * INV15;\n          A = parseInt(text.charAt(4), 16) * INV15;\n          break;\n\n        case 7:\n          R = parseInt(text.substr(1, 2), 16) * INV255;\n          G = parseInt(text.substr(3, 2), 16) * INV255;\n          B = parseInt(text.substr(5, 2), 16) * INV255;\n          break;\n\n        case 9:\n          R = parseInt(text.substr(1, 2), 16) * INV255;\n          G = parseInt(text.substr(3, 2), 16) * INV255;\n          B = parseInt(text.substr(5, 2), 16) * INV255;\n          A = parseInt(text.substr(7, 2), 16) * INV255;\n          break;\n\n        default:\n      }\n\n      if (isNaN(R) || isNaN(G) || isNaN(B) || isNaN(A)) {\n        this.R = this.G = this.B = this.A = 0;\n      } else {\n        this.R = R;\n        this.G = G;\n        this.B = B;\n        this.A = A;\n      }\n\n      return true;\n    }\n    /**\n     * @param   {string} text - `rgb(200, 140, 50)`\n     * @returns {boolean} `true` if `text` is a valid `rgb()` syntax.\n     */\n\n  }, {\n    key: \"parseRGB\",\n    value: function parseRGB(text) {\n      var m = RX_RGB.exec(text);\n      if (!m) return false;\n      this.R = clamp01(parseInt(m[1], 10) * INV255);\n      this.G = clamp01(parseInt(m[2], 10) * INV255);\n      this.B = clamp01(parseInt(m[3], 10) * INV255);\n      this.A = 1;\n      return true;\n    }\n    /**\n     * @param   {string} text - `rgba(200, 140, 50, 0.5)`\n     * @returns {boolean} `true` if `text` is a valid `rgba()` syntax.\n     */\n\n  }, {\n    key: \"parseRGBA\",\n    value: function parseRGBA(text) {\n      var m = RX_RGBA.exec(text);\n      if (!m) return false;\n      this.R = clamp01(parseInt(m[1], 10) * INV255);\n      this.G = clamp01(parseInt(m[2], 10) * INV255);\n      this.B = clamp01(parseInt(m[3], 10) * INV255);\n      this.A = clamp01(parseFloat(m[4]));\n      return true;\n    }\n    /**\n     * @param   {string} text - `hsl(200, 140, 50)`\n     * @returns {boolean} `true` if `text` is a valid `hsl()` syntax.\n     */\n\n  }, {\n    key: \"parseHSL\",\n    value: function parseHSL(text) {\n      var m = RX_HSL.exec(text);\n      if (!m) return false;\n      this.H = clamp01(parseInt(m[1], 10) * INV359);\n      this.S = clamp01(parseInt(m[2], 10) * INV99);\n      this.L = clamp01(parseInt(m[3], 10) * INV99);\n      this.A = 1;\n      this.hsl2rgb();\n      return true;\n    }\n  }], [{\n    key: \"mix\",\n    value: function mix(color1, color2) {\n      var alpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .5;\n      var beta = 1 - alpha;\n      return Color.newRGBA(alpha * color2.R + beta * color1.R, alpha * color2.G + beta * color1.G, alpha * color2.B + beta * color1.B, alpha * color2.A + beta * color1.A);\n    }\n  }, {\n    key: \"newBlack\",\n    value: function newBlack() {\n      return Color.newRGB(0, 0, 0);\n    }\n  }, {\n    key: \"newWhite\",\n    value: function newWhite() {\n      return Color.newRGB(1, 1, 1);\n    }\n    /**\n     * Create a new Color instance base on R,G,B channels.\n     *\n     * @param   {number} red - Value between 0 and 1.\n     * @param   {number} green - Value between 0 and 1.\n     * @param   {number} blue - Value between 0 and 1.\n     * @returns {Color} New instance of Color.\n     */\n\n  }, {\n    key: \"newRGB\",\n    value: function newRGB(red, green, blue) {\n      var color = new Color();\n      color.R = red;\n      color.G = green;\n      color.B = blue;\n      color.A = 1;\n      return color;\n    }\n    /**\n     * Create a new Color instance base on R,G,B,A channels.\n     *\n     * @param   {number} red - Value between 0 and 1.\n     * @param   {number} green - Value between 0 and 1.\n     * @param   {number} blue - Value between 0 and 1.\n     * @param   {number} alpha - Value between 0 and 1.\n     * @returns {Color} New instance of Color.\n     */\n\n  }, {\n    key: \"newRGBA\",\n    value: function newRGBA(red, green, blue, alpha) {\n      var color = new Color();\n      color.R = red;\n      color.G = green;\n      color.B = blue;\n      color.A = alpha;\n      return color;\n    }\n  }]);\n\n  return Color;\n}();\n\nexport { Color as default };\nvar INV6 = 1 / 6,\n    INV15 = 1 / 15,\n    INV99 = 1 / 99,\n    INV255 = 1 / 255,\n    INV359 = 1 / 359;\nvar RX_RGB = /^RGB[\\s\\(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/;\nvar RX_RGBA = /^RGBA[\\s\\(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9\\.]+([0-9\\.]+)/;\nvar RX_HSL = /^HSL[\\s\\(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/;\n\nfunction clamp01(value) {\n  if (value < 0) return 0;\n  if (value > 1) return 1;\n  return value;\n}\n\nfunction hexa2(value) {\n  var out = Math.floor(value).toString(16);\n  if (out.length < 2) out = \"0\" + out;\n  return out;\n}","map":{"version":3,"sources":["/home/tolokoban/Code/github/boulder-dash/src/tfw/color.ts"],"names":["Color","codeCSS","R","G","B","H","S","L","A","parse","code","input","trim","toUpperCase","parseHexa","call","parseRGB","parseRGBA","parseHSL","luminance","color","hexa2","newColor","chroma","Math","abs","x","shift","min","max","delta","INV6","text","charAt","length","parseInt","INV15","substr","INV255","isNaN","m","RX_RGB","exec","clamp01","RX_RGBA","parseFloat","RX_HSL","INV359","INV99","hsl2rgb","color1","color2","alpha","beta","newRGBA","newRGB","red","green","blue","value","out","floor","toString"],"mappings":"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","sourcesContent":["/**\n * @class Color\n * Fast color manipulations.\n * Attributes R  (red), G  (green), B  (blue), A  (alpha), H  (hue), S\n * (saturation), and L (luminance) are all floats between 0 and 1.\n */\nexport default class Color {\n    public R: number;\n    public G: number;\n    public B: number;\n    public H: number;\n    public S: number;\n    public L: number;\n    public A: number;\n\n    constructor(codeCSS: string = \"#000000\") {\n        this.R = 0;\n        this.G = 0;\n        this.B = 0;\n        this.H = 0;\n        this.S = 0;\n        this.L = 0;\n        this.A = 1;\n\n        this.parse(codeCSS);\n    }\n\n    static mix(color1: Color, color2: Color, alpha: number=.5) {\n        const beta = 1 - alpha;\n        return Color.newRGBA(\n            alpha * color2.R + beta * color1.R,\n            alpha * color2.G + beta * color1.G,\n            alpha * color2.B + beta * color1.B,\n            alpha * color2.A + beta * color1.A\n        );\n    }\n\n    static newBlack() {\n        return Color.newRGB(0, 0, 0);\n    }\n\n    static newWhite() {\n        return Color.newRGB(1, 1, 1);\n    }\n\n    /**\n     * Create a new Color instance base on R,G,B channels.\n     *\n     * @param   {number} red - Value between 0 and 1.\n     * @param   {number} green - Value between 0 and 1.\n     * @param   {number} blue - Value between 0 and 1.\n     * @returns {Color} New instance of Color.\n     */\n    static newRGB(red: number, green: number, blue: number) {\n        const color = new Color();\n        color.R = red;\n        color.G = green;\n        color.B = blue;\n        color.A = 1;\n        return color;\n    }\n\n    /**\n     * Create a new Color instance base on R,G,B,A channels.\n     *\n     * @param   {number} red - Value between 0 and 1.\n     * @param   {number} green - Value between 0 and 1.\n     * @param   {number} blue - Value between 0 and 1.\n     * @param   {number} alpha - Value between 0 and 1.\n     * @returns {Color} New instance of Color.\n     */\n    static newRGBA(red: number, green: number, blue: number, alpha: number) {\n        const color = new Color();\n        color.R = red;\n        color.G = green;\n        color.B = blue;\n        color.A = alpha;\n        return color;\n    }\n\n    /**\n     * Parse a color writtent in CSS syntax.\n     *\n     * @param   {string} code - CSS color.\n     * @returns {boolean} `true` if the color has valid syntax.\n     */\n    parse(code: string = \"#000000\"): boolean {\n        const input = code.trim().toUpperCase();\n        if (this.parseHexa.call(this, input)) return true;\n        if (this.parseRGB.call(this, input)) return true;\n        if (this.parseRGBA.call(this, input)) return true;\n        if (this.parseHSL.call(this, input)) return true;\n        // @TODO parseHSLA.\n        return false;\n    }\n\n    /**\n     * @see https://en.wikipedia.org/wiki/Grayscale\n     * @this Color\n     * @returns {undefined}\n     */\n    luminance(): number {\n        return (0.2126 * this.R) + (0.7152 * this.G) + (0.0722 * this.B);\n    }\n\n    /**\n     * @returns {integer} 0 if the color is dark and 1 if it is light.\n     */\n    luminanceStep(): number {\n        return this.luminance() < .6 ? 0 : 1;\n    }\n\n    /**\n     * @this Color\n     * @returns {string} String value of the color. `#fd45a7`.\n     */\n    stringify() {\n        let color = hexa2(this.R * 255) + hexa2(this.G * 255) + hexa2(this.B * 255);\n        if (this.A < 1) {\n            color += hexa2(this.A * 255);\n        }\n        return `#${color}`;\n    }\n\n    copy() {\n        const newColor = new Color();\n        newColor.R = this.R;\n        newColor.G = this.G;\n        newColor.B = this.B;\n        newColor.A = this.A;\n        newColor.H = this.H;\n        newColor.S = this.S;\n        newColor.L = this.L;\n        return newColor;\n    }\n\n    /**\n         * @see https://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n         * @this Color\n         * @returns {undefined}\n         */\n    hsl2rgb() {\n        const\n            H = 6 * this.H,\n            S = this.S,\n            L = this.L,\n            chroma = (1 - Math.abs(2 * L - 1)) * S,\n            x = chroma * (1 - Math.abs(H % 2 - 1));\n\n        let R = 0, G = 0, B = 0;\n\n        if (H < 3) {\n            if (H < 1) {\n                R = chroma; G = x; B = 0;\n            } else if (H < 2) {\n                R = x; G = chroma; B = 0;\n            } else {\n                // H == 2.\n                R = 0; G = chroma; B = x;\n            }\n        } else if (H < 4) {\n            R = 0; G = x; B = chroma;\n        } else if (H < 5) {\n            R = x; G = 0; B = chroma;\n        } else {\n            R = chroma; G = 0; B = x;\n        }\n\n        const shift = L - chroma * 0.5;\n        this.R = R + shift;\n        this.G = G + shift;\n        this.B = B + shift;\n    }\n\n    rgb2hsl() {\n        const R = this.R;\n        const G = this.G;\n        const B = this.B;\n\n        const min = Math.min(R, G, B);\n        const max = Math.max(R, G, B);\n        const delta = max - min;\n\n        this.L = 0.5 * (max + min);\n\n        if (delta < 0.000001) {\n            this.H = 0;\n            this.S = 0;\n        }\n        else {\n            this.S = delta / (1 - Math.abs(2 * this.L - 1));\n            if (max === R) {\n                if (G >= B) {\n                    this.H = INV6 * ((G - B) / delta);\n                } else {\n                    this.H = 1 - INV6 * ((B - G) / delta);\n                }\n            }\n            else if (max === G) {\n                this.H = INV6 * (2 + (B - R) / delta);\n            }\n            else {\n                this.H = INV6 * (4 + (R - G) / delta);\n            }\n        }\n    }\n\n    private parseHexa(text: string) {\n        if (text.charAt(0) !== '#') return false;\n        let R = 0, G = 0, B = 0, A = 1;\n\n        switch (text.length) {\n            case 4:\n                R = parseInt(text.charAt(1), 16) * INV15;\n                G = parseInt(text.charAt(2), 16) * INV15;\n                B = parseInt(text.charAt(3), 16) * INV15;\n                break;\n            case 5:\n                R = parseInt(text.charAt(1), 16) * INV15;\n                G = parseInt(text.charAt(2), 16) * INV15;\n                B = parseInt(text.charAt(3), 16) * INV15;\n                A = parseInt(text.charAt(4), 16) * INV15;\n                break;\n            case 7:\n                R = parseInt(text.substr(1, 2), 16) * INV255;\n                G = parseInt(text.substr(3, 2), 16) * INV255;\n                B = parseInt(text.substr(5, 2), 16) * INV255;\n                break;\n            case 9:\n                R = parseInt(text.substr(1, 2), 16) * INV255;\n                G = parseInt(text.substr(3, 2), 16) * INV255;\n                B = parseInt(text.substr(5, 2), 16) * INV255;\n                A = parseInt(text.substr(7, 2), 16) * INV255;\n                break;\n            default:\n        }\n\n        if (isNaN(R) || isNaN(G) || isNaN(B) || isNaN(A)) {\n            this.R = this.G = this.B = this.A = 0;\n        } else {\n            this.R = R;\n            this.G = G;\n            this.B = B;\n            this.A = A;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param   {string} text - `rgb(200, 140, 50)`\n     * @returns {boolean} `true` if `text` is a valid `rgb()` syntax.\n     */\n    private parseRGB(text: string) {\n        const m = RX_RGB.exec(text);\n        if (!m) return false;\n        this.R = clamp01(parseInt(m[1], 10) * INV255);\n        this.G = clamp01(parseInt(m[2], 10) * INV255);\n        this.B = clamp01(parseInt(m[3], 10) * INV255);\n        this.A = 1;\n        return true;\n    }\n\n    /**\n     * @param   {string} text - `rgba(200, 140, 50, 0.5)`\n     * @returns {boolean} `true` if `text` is a valid `rgba()` syntax.\n     */\n    private parseRGBA(text: string) {\n        const m = RX_RGBA.exec(text);\n        if (!m) return false;\n        this.R = clamp01(parseInt(m[1], 10) * INV255);\n        this.G = clamp01(parseInt(m[2], 10) * INV255);\n        this.B = clamp01(parseInt(m[3], 10) * INV255);\n        this.A = clamp01(parseFloat(m[4]));\n        return true;\n    }\n\n    /**\n     * @param   {string} text - `hsl(200, 140, 50)`\n     * @returns {boolean} `true` if `text` is a valid `hsl()` syntax.\n     */\n    private parseHSL(text: string) {\n        const m = RX_HSL.exec(text);\n        if (!m) return false;\n        this.H = clamp01(parseInt(m[1], 10) * INV359);\n        this.S = clamp01(parseInt(m[2], 10) * INV99);\n        this.L = clamp01(parseInt(m[3], 10) * INV99);\n        this.A = 1;\n        this.hsl2rgb();\n        return true;\n    }\n}\n\nconst\n    INV6 = 1 / 6,\n    INV15 = 1 / 15,\n    INV99 = 1 / 99,\n    INV255 = 1 / 255,\n    INV359 = 1 / 359;\n\nconst RX_RGB = /^RGB[\\s\\(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/;\nconst RX_RGBA = /^RGBA[\\s\\(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9\\.]+([0-9\\.]+)/;\nconst RX_HSL = /^HSL[\\s\\(]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)/;\n\nfunction clamp01(value: number): number {\n    if (value < 0) return 0;\n    if (value > 1) return 1;\n    return value;\n}\n\nfunction hexa2(value: number) {\n    let out = Math.floor(value).toString(16);\n    if (out.length < 2) out = \"0\" + out;\n    return out;\n}\n"]},"metadata":{},"sourceType":"module"}